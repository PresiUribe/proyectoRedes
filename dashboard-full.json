{
  "dashboard": {
    "uid": "full-stack-metrics-v2",
    "title": "Dashboard Full Stack - MÃ©tricas Reales",
    "timezone": "browser",
    "schemaVersion": 27,
    "version": 1,
    "panels": [
      {
        "type": "timeseries",
        "title": "CPU Node.js (microservicios)",
        "datasource": "Prometheus",
        "targets": [
          {
            "expr": "rate(process_cpu_seconds_total{job=\"microservicios\"}[1m])",
            "legendFormat": "{{instance}}"
          }
        ],
        "gridPos": { "x": 0, "y": 0, "w": 12, "h": 6 }
      },
      {
        "type": "timeseries",
        "title": "Memoria residente Node.js",
        "datasource": "Prometheus",
        "targets": [
          {
            "expr": "process_resident_memory_bytes{job=\"microservicios\"}",
            "legendFormat": "{{instance}}"
          }
        ],
        "gridPos": { "x": 12, "y": 0, "w": 12, "h": 6 }
      },
      {
        "type": "timeseries",
        "title": "Handles activos Node.js",
        "datasource": "Prometheus",
        "targets": [
          {
            "expr": "nodejs_active_handles_total{job=\"microservicios\"}",
            "legendFormat": "{{instance}}"
          }
        ],
        "gridPos": { "x": 0, "y": 6, "w": 12, "h": 6 }
      },
      {
        "type": "timeseries",
        "title": "Event Loop Lag (P50/P90/P99)",
        "datasource": "Prometheus",
        "targets": [
          {
            "expr": "histogram_quantile(0.50, sum(rate(nodejs_eventloop_lag_seconds_bucket{job=\"microservicios\"}[1m])) by (le,instance))",
            "legendFormat": "P50 {{instance}}"
          },
          {
            "expr": "histogram_quantile(0.90, sum(rate(nodejs_eventloop_lag_seconds_bucket{job=\"microservicios\"}[1m])) by (le,instance))",
            "legendFormat": "P90 {{instance}}"
          },
          {
            "expr": "histogram_quantile(0.99, sum(rate(nodejs_eventloop_lag_seconds_bucket{job=\"microservicios\"}[1m])) by (le,instance))",
            "legendFormat": "P99 {{instance}}"
          }
        ],
        "gridPos": { "x": 12, "y": 6, "w": 12, "h": 6 }
      },
      {
        "type": "timeseries",
        "title": "Latencia HTTP (microservicios)",
        "datasource": "Prometheus",
        "targets": [
          {
            "expr": "histogram_quantile(0.50, sum(rate(http_request_duration_seconds_bucket{job=\"microservicios\"}[1m])) by (le,instance))",
            "legendFormat": "P50 {{instance}}"
          },
          {
            "expr": "histogram_quantile(0.95, sum(rate(http_request_duration_seconds_bucket{job=\"microservicios\"}[1m])) by (le,instance))",
            "legendFormat": "P95 {{instance}}"
          },
          {
            "expr": "histogram_quantile(0.99, sum(rate(http_request_duration_seconds_bucket{job=\"microservicios\"}[1m])) by (le,instance))",
            "legendFormat": "P99 {{instance}}"
          }
        ],
        "gridPos": { "x": 0, "y": 12, "w": 12, "h": 6 }
      },
      {
        "type": "timeseries",
        "title": "Throughput HTTP (req/s)",
        "datasource": "Prometheus",
        "targets": [
          {
            "expr": "sum(rate(http_request_duration_seconds_count{job=\"microservicios\"}[1m])) by (instance)",
            "legendFormat": "{{instance}}"
          }
        ],
        "gridPos": { "x": 12, "y": 12, "w": 12, "h": 6 }
      },

      {
        "type": "timeseries",
        "title": "Goroutines (Go)",
        "datasource": "Prometheus",
        "targets": [
          {
            "expr": "go_goroutines{job=\"microservicios\"}",
            "legendFormat": "{{instance}}"
          }
        ],
        "gridPos": { "x": 0, "y": 18, "w": 12, "h": 6 }
      },
      {
        "type": "timeseries",
        "title": "GC Pause (P50/P95/P99)",
        "datasource": "Prometheus",
        "targets": [
          {
            "expr": "histogram_quantile(0.50, sum(rate(go_gc_duration_seconds_bucket{job=\"microservicios\"}[5m])) by (le))",
            "legendFormat": "P50"
          },
          {
            "expr": "histogram_quantile(0.95, sum(rate(go_gc_duration_seconds_bucket{job=\"microservicios\"}[5m])) by (le))",
            "legendFormat": "P95"
          },
          {
            "expr": "histogram_quantile(0.99, sum(rate(go_gc_duration_seconds_bucket{job=\"microservicios\"}[5m])) by (le))",
            "legendFormat": "P99"
          }
        ],
        "gridPos": { "x": 12, "y": 18, "w": 12, "h": 6 }
      },


      {
        "type": "timeseries",
        "title": "HAProxy up",
        "datasource": "Prometheus",
        "targets": [
          {
            "expr": "haproxy_up",
            "legendFormat": "{{instance}}"
          }
        ],
        "gridPos": { "x": 0, "y": 24, "w": 12, "h": 6 }
      },
      {
        "type": "timeseries",
        "title": "Scrapes HAProxy Exporter",
        "datasource": "Prometheus",
        "targets": [
          {
            "expr": "haproxy_exporter_scrapes_total",
            "legendFormat": "scrapes"
          },
          {
            "expr": "haproxy_exporter_csv_parse_failures_total",
            "legendFormat": "errores CSV"
          }
        ],
        "gridPos": { "x": 12, "y": 24, "w": 12, "h": 6 }
      },


      {
        "type": "timeseries",
        "title": "Brokers en Cluster Kafka",
        "datasource": "Prometheus",
        "targets": [
          {
            "expr": "kafka_brokers",
            "legendFormat": "brokers"
          }
        ],
        "gridPos": { "x": 0, "y": 30, "w": 12, "h": 6 }
      },
      {
        "type": "timeseries",
        "title": "Offsets por Partition (actual/oldest)",
        "datasource": "Prometheus",
        "targets": [
          {
            "expr": "kafka_topic_partition_current_offset{topic=\"pagos\"}",
            "legendFormat": "pagos current"
          },
          {
            "expr": "kafka_topic_partition_oldest_offset{topic=\"pagos\"}",
            "legendFormat": "pagos oldest"
          },
          {
            "expr": "kafka_topic_partition_current_offset{topic=\"reservas\"}",
            "legendFormat": "reservas current"
          },
          {
            "expr": "kafka_topic_partition_oldest_offset{topic=\"reservas\"}",
            "legendFormat": "reservas oldest"
          }
        ],
        "gridPos": { "x": 12, "y": 30, "w": 12, "h": 6 }
      },
      {
        "type": "timeseries",
        "title": "Under-replicated Partitions",
        "datasource": "Prometheus",
        "targets": [
          {
            "expr": "kafka_topic_partition_under_replicated_partition",
            "legendFormat": "{{topic}}/{{partition}}"
          }
        ],
        "gridPos": { "x": 0, "y": 36, "w": 24, "h": 6 }
      }
    ]
  },
  "overwrite": true
}
