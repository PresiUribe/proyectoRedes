version: '3.8'

services:
  # ---------------------------------------------------------------------------
  # Base de datos MySQL compartida
  # ---------------------------------------------------------------------------
  db:
    image: mysql:8.0
    volumes:
      - db_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      MYSQL_ROOT_PASSWORD: mysql
      MYSQL_DATABASE: usuariosMS
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - backend

  # ---------------------------------------------------------------------------
  # Microservicio Usuarios
  # ---------------------------------------------------------------------------
  usuario_ms:
    image: usuario_ms:latest      # previamente build -t usuario_ms:latest ./usuario
    environment:
      DB_HOST: db
      DB_USER: root
      DB_PASSWORD: mysql
      DB_NAME: usuariosMS
    depends_on: [ db ]
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    networks:
      - backend

  # ---------------------------------------------------------------------------
  # Microservicio Pagos
  # ---------------------------------------------------------------------------
  pagos_ms:
    image: pagos_ms:latest        # previamente build -t pagos_ms:latest ./pagos
    environment:
      DB_HOST: db
      DB_USER: root
      DB_PASSWORD: mysql
      DB_NAME: pagosMS
      RESERVAS_URL: http://reservas_ms:3000
    depends_on: [ db ]
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    networks:
      - backend

  # ---------------------------------------------------------------------------
  # Microservicio Reservas
  # ---------------------------------------------------------------------------
  reservas_ms:
    image: reservas_ms:latest     # previamente build -t reservas_ms:latest ./reservas
    environment:
      DB_HOST: db
      DB_USER: root
      DB_PASSWORD: mysql
      DB_NAME: reservasMS
      USERS_URL: http://usuario_ms:3000
    depends_on: [ db ]
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    networks:
      - backend

  # ---------------------------------------------------------------------------
  # Microservicio Propiedades
  # ---------------------------------------------------------------------------
  propiedades_ms:
    image: propiedades_ms:latest  # previamente build -t propiedades_ms:latest ./propiedades
    environment:
      DB_HOST: db
      DB_USER: root
      DB_PASSWORD: mysql
      DB_NAME: propiedadesMS
    depends_on: [ db ]
    deploy:
      replicas: 3
      restart_policy:
        condition: on-failure
    networks:
      - backend

  # ---------------------------------------------------------------------------
  # API Gateway con HAProxy
  # ---------------------------------------------------------------------------
  haproxy:
    image: haproxy:2.6-alpine
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    ports:
      - "80:80"      # HTTP gateway
      - "8404:8404"  # stats CSV
    depends_on: [ usuario_ms, pagos_ms, reservas_ms, propiedades_ms ]
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    networks:
      - backend
      - frontend

  # ---------------------------------------------------------------------------
  # Prometheus
  # ---------------------------------------------------------------------------
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    ports:
      - "9090:9090"
    depends_on: [ haproxy ]
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - backend

  # ---------------------------------------------------------------------------
  # Grafana
  # ---------------------------------------------------------------------------
  grafana:
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    ports:
      - "3003:3000"
    depends_on: [ prometheus ]
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - backend

  # ---------------------------------------------------------------------------
  # (Opcional) Front-end est√°tico servido por NGINX
  # ---------------------------------------------------------------------------
  front:
    image: nginx:stable-alpine
    volumes:
      - ./front:/usr/share/nginx/html:ro
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "8081:80"
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    networks:
      - frontend

networks:
  backend:
    driver: overlay
  frontend:
    driver: overlay

volumes:
  db_data:
    driver: local
