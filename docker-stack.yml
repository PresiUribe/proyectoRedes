version: "3.8"

services:
  kafka:
    image: bitnami/kafka:3.3.2
    environment:
      # 1) roles: broker + controller
      - KAFKA_CFG_PROCESS_ROLES=broker,controller

      # 2) un node.id (distinto para cada nodo en un cluster multi-node)
      - KAFKA_CFG_NODE_ID=1

      # 3) listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093

      # 4) protocolo de seguridad para cada listener
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CREATE_TOPICS=\
        pagos-eventos:5:1,\
        fechas-eventos:5:1,\
        avg-precio-por-fecha:5:1,\
        conteo-reservas-por-fecha:5:1
    volumes:
      - ./create-topics.sh:/docker-entrypoint-initdb.d/01-create-topics.sh:ro
    ports:
      - "9092:9092"
    networks:
      - back

  kafka-exporter:
      image: danielqsj/kafka-exporter:latest
      environment:
        # Le indicas al exporter dónde está tu broker
        - KAFKA_BROKERS=kafka:9092
        # (Opcional) Nivel de log: debug, info, warn, error
        - LOG_LEVEL=info
        # (Opcional) Polling interval en segundos (default: 30s)
        - POLL_INTERVAL=30
      ports:
        - "9308:9308"     # Exponemos el puerto 9308 para Prometheus
      networks:
        - back
      deploy:
        replicas: 1
        restart_policy:
          condition: on-failure

  streams-app:
    image: streaming-app:latest
    environment:
      - APPLICATION_ID=streaming-app
      - BOOTSTRAP_SERVERS=kafka:9092
    depends_on:
      - kafka
    command: ["sh", "-c", "sleep 60 && java -jar streaming-app.jar"]
    networks:
      - back
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  kafka-consumer:
    image: bitnami/kafka:latest
    command: ["/bin/bash", "-c", "sleep infinity"]
    networks:
      - back

  ## 3) Base de datos MySQL
  db:
    image: mysql:8.0
    container_name: db
    environment:
      - MYSQL_ROOT_PASSWORD=mysql
    volumes:
      - db_data:/var/lib/mysql
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./Airbnb_Texas_Rentals.csv:/var/lib/mysql-files/propiedades.csv:ro
    networks:
      - back

  ## 4) Microservicios (usuario, reservas, propiedades, pagos) …
  usuario_ms:
    image: usuario_ms:latest
    depends_on: [db]
    environment:
      - DB_HOST=db
      - DB_USER=root
      - DB_PASSWORD=mysql
      - DB_NAME=usuariosMS
    deploy:
      replicas: 3
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
    networks:
      - back

  reservas_ms:
    image: reservas_ms:latest
    depends_on: [db]
    environment:
      - DB_HOST=db
      - DB_USER=root
      - DB_PASSWORD=mysql
      - DB_NAME=reservasMS
    deploy:
      replicas: 3
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
    networks:
      - back

  propiedades_ms:
    image: propiedades_ms:latest
    depends_on: [db]
    environment:
      - DB_HOST=db
      - DB_USER=root
      - DB_PASSWORD=mysql
      - DB_NAME=propiedadesMS
    deploy:
      replicas: 3
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
    networks:
      - back

  pagos_ms:
    image: pagos_ms:latest
    depends_on: [db]
    environment:
      - DB_HOST=db
      - DB_USER=root
      - DB_PASSWORD=mysql
      - DB_NAME=pagosMS
    deploy:
      replicas: 3
      update_config:
        parallelism: 2
        delay: 10s
      restart_policy:
        condition: on-failure
    networks:
      - back

  ## 5) HAProxy + exporter
  haproxy:
    image: haproxy:2.6-alpine
    depends_on:
      - usuario_ms
      - reservas_ms
      - propiedades_ms
      - pagos_ms
    ports:
      - "80:80"
      - "8404:8404"
    volumes:
      - ./haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 5s
      restart_policy:
        condition: on-failure
    networks:
      - back

  haproxy-exporter:
    image: prom/haproxy-exporter:latest
    command:
      - --haproxy.scrape-uri=http://admin:secret@haproxy:8404/stats;csv
    ports:
      - "9101:9101"
    networks:
      - back

  ## 6) Prometheus (lee prometheus.yml)
  prometheus:
    image: prom/prometheus:latest
    depends_on:
      - haproxy
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - back

  ## 7) Grafana apuntando a prometheus
  grafana:
    image: grafana/grafana:latest
    container_name: proyecto_grafana
    depends_on:
      - prometheus
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s:%(http_port)s
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    networks:
      - back

  ## 8) Frontend estático
  frontend:
    image: nginx:alpine
    volumes:
      - ./front:/usr/share/nginx/html:ro
      - ./front/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "8080:80"
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
    networks:
      - back


networks:
  back:
    driver: overlay

volumes:
  db_data:
