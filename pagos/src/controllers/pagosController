const { Router } = require('express');
const axios = require('axios'); // Librería para hacer peticiones HTTP REST
const router = Router();
const pagosModel = require('../models/pagosModel');
const USERS_BASE = process.env.USERS_URL || 'http://usuario_ms:3000';
const RESERVAS_BASE = process.env.RESERVAS_URL || 'http://reservas_ms:3000';
const { Kafka } = require('kafkajs');
const kafka = new Kafka({ clientId: 'pagos-service', brokers: [process.env.KAFKA_BROKER] });
const producer = kafka.producer();
await producer.connect();
// pagosController.js
router.get('/pagos/pending', async (req, res) => {
  try {
    const pagos = await pagosModel.obtenerPagosPendientes();

    const enriched = await Promise.all(pagos.map(async p => {
      try {
        const { data: reserva } = await axios.get(
          `${RESERVAS_BASE}/reservas/${p.reserva_id}`
        );
        return {
          ...p,
          propiedad_id: reserva.propiedad_id
        };
      } catch (err) {
        console.error(`Error al obtener reserva ${p.reserva_id}:`, err.message);
        return {
          ...p,
          propiedad_id: null
        };
      }
    }));

    res.json(enriched);
  } catch (error) {
    console.error(error);
    res.status(500).send("Error al obtener pagos pendientes");
  }
});




/**
 * POST /pagos
 * Procesar un nuevo pago.
 * Se espera recibir en el body:
 * {
 *   "reserva_id": 123,
 *   "monto": 200.00,
 *   "estado": "pendiente"
 * }
 *
 * Flujo:
 * 1. Se consulta al microservicio de Reservas para obtener la reserva (y de ahí el usuario_id).
 * 2. Se consulta al microservicio de Usuarios para obtener el método de pago del usuario.
 * 3. Se crea el pago usando la información recopilada.
 */

router.post('/pagos', async (req, res) => {
  try {
    const { reserva_id, monto, estado } = req.body;

    // 1. Consultar la reserva
    const { data: reserva } = await axios.get(`${RESERVAS_BASE}/reservas/${reserva_id}`);
    if (!reserva) return res.status(404).json({ message: "Reserva no encontrada" });

    // 2. Consultar usuario
    const { data: usuario } = await axios.get(`${USERS_BASE}/usuarios/${reserva.usuario_id}`);
    if (!usuario) return res.status(404).json({ message: "Usuario no encontrado" });

    const metodo_pago = usuario.tipo_tarjeta;

    // 3. Crear el pago
    const nuevoPago = await pagosModel.crearPago(reserva_id, metodo_pago, monto, estado);

    // 4. Actualizar reserva
    await axios.put(`${RESERVAS_BASE}/reservas/${reserva_id}`, { Estado: 'pendiente' });

    // 5. Enviar evento a Kafka
    try {
      await producer.send({
        topic: 'pagos-eventos',
        messages: [{
          value: JSON.stringify({
            pago_id: nuevoPago.insertId || nuevoPago.id,
            monto,
            timestamp: new Date().toISOString()
          })
        }]
      });
    } catch (kErr) {
      console.error('Error enviando a Kafka:', kErr);
      // No detiene la respuesta al cliente
    }

    // 6. Responder al cliente
    res.status(201).json({
      message: "Pago procesado y reserva actualizada a pendiente",
      pago: nuevoPago
    });

  } catch (error) {
    console.error(error);
    res.status(500).send("Error al procesar el pago");
  }
});

/**
 * GET /pagos/:id
 * Obtener detalles de un pago.
 */
router.get('/pagos/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const pago = await pagosModel.obtenerPago(id);
        if (pago.length > 0) {
            res.json(pago[0]);
        } else {
            res.status(404).send("Pago no encontrado");
        }
    } catch (error) {
        console.error(error);
        res.status(500).send("Error al obtener el pago");
    }
});

/**
 * GET /pagos/recibo/:id
 * Generar un recibo de pago (retorna un JSON con la información del pago y la fecha actual).
 */
router.get('/pagos/recibo/:id', async (req, res) => {
    const { id } = req.params;
    try {
        const pago = await pagosModel.obtenerPago(id);
        if (pago.length > 0) {
            const data = pago[0];
            const recibo = {
                mensaje: "Recibo de pago",
                pago_id: data.id,
                reserva_id: data.reserva_id,
                metodo_pago: data.metodo_pago,
                monto: data.monto,
                estado: data.estado,
                fecha: new Date().toISOString()
            };
            res.json(recibo);
        } else {
            res.status(404).send("Pago no encontrado");
        }
    } catch (error) {
        console.error(error);
        res.status(500).send("Error al generar el recibo");
    }
});

/**
 * PUT /pagos/:id
 * Actualizar el estado de un pago.
 * Body esperado:
 * {
 *   "estado": "aprobado"
 * }
 */
router.put('/pagos/:id', async (req, res) => {
    const { id } = req.params;
    const { estado } = req.body;
    try {
        await pagosModel.actualizarEstadoPago(id, estado);
        res.send("Estado de pago actualizado");
    } catch (error) {
        console.error(error);
        res.status(500).send("Error al actualizar el estado del pago");
    }
});





// pagosController.js
router.put('/pagos/aceptar/:paymentId', async (req, res) => {
  const paymentId = req.params.paymentId;
  try {
    const result = await pagosModel.aceptarPago(paymentId);
    if (result.affectedRows > 0) {
      res.json({ message: "Pago actualizado a aprobado" });
    } else {
      res.status(404).send("Pago no encontrado");
    }
  } catch (error) {
    console.error(error);
    res.status(500).send("Error al actualizar el pago");
  }
});



module.exports = router;
