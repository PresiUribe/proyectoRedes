const mysql = require('mysql2/promise');

// Configuración de la conexión a la base de datos
const connection = mysql.createPool({
    host: process.env.DB_HOST || 'localhost',
    user: process.env.DB_USER || 'root',
    password: process.env.DB_PASSWORD || 'mysql',
    database: process.env.DB_NAME || 'propiedadesMS'
});

async function contarPropiedades({ city, bedrooms_count, precio_min, precio_max }) {
  let sql    = 'SELECT COUNT(*) AS total FROM propiedades WHERE 1=1';
  const params = [];

  if (city) {
    sql    += ' AND city = ?';
    params.push(city);
  }
  if (bedrooms_count) {
    sql    += ' AND bedrooms_count = ?';
    params.push(bedrooms_count);
  }
  if (precio_min) {
    sql    += ' AND average_rate_per_night >= ?';
    params.push(precio_min);
  }
  if (precio_max) {
    sql    += ' AND average_rate_per_night <= ?';
    params.push(precio_max);
  }

  const [[{ total }]] = await connection.query(sql, params);
  return total;
}

/**
 * Trae página de propiedades según filtros, limit y offset.
 */
async function traerPropiedades({ filtros, limit, offset }) {
  const { city, bedrooms_count, precio_min, precio_max } = filtros;
  let sql    = 'SELECT * FROM propiedades WHERE 1=1';
  const params = [];

  if (city)          { sql    += ' AND city = ?';                   params.push(city); }
  if (bedrooms_count){ sql    += ' AND bedrooms_count = ?';         params.push(bedrooms_count); }
  if (precio_min)    { sql    += ' AND average_rate_per_night >= ?'; params.push(precio_min); }
  if (precio_max)    { sql    += ' AND average_rate_per_night <= ?'; params.push(precio_max); }

  sql += ' ORDER BY id LIMIT ? OFFSET ?';
  params.push(limit, offset);

  const [rows] = await connection.query(sql, params);
  return rows;
}

// Obtener la información de una propiedad por su ID
async function traerPropiedad(id) {
    const [rows] = await connection.query('SELECT * FROM propiedades WHERE id = ?', [id]);
    return rows;  // rows será un array de resultados
}

// Crear una nueva propiedad
// Recibe 8 parámetros, uno para cada columna (exceptuando el id autoincrement):
// average_rate, bedrooms, city, date, desc, lat, long, title
async function crearPropiedad(
    average_rate_per_night,
    bedrooms_count,
    city,
    date_of_listing,
    description,
    latitude,
    longitude,
    title
) {
    const [result] = await connection.query(
        `INSERT INTO propiedades
         VALUES (NULL, ?, ?, ?, ?, ?, ?, ?, ?)`,
        [
            average_rate_per_night,
            bedrooms_count,
            city,
            date_of_listing,
            description,
            latitude,
            longitude,
            title
        ]
    );
    return result;  // result.insertId contiene el id generado
}

// Actualizar una propiedad existente
// Actualiza las 8 columnas según su id
async function actualizarPropiedad(
    id,
    average_rate_per_night,
    bedrooms_count,
    city,
    date_of_listing,
    description,
    latitude,
    longitude,
    title
) {
    const [result] = await connection.query(
        `UPDATE propiedades
         SET average_rate_per_night = ?,
             bedrooms_count = ?,
             city = ?,
             date_of_listing = ?,
             description = ?,
             latitude = ?,
             longitude = ?,
             title = ?
         WHERE id = ?`,
        [
            average_rate_per_night,
            bedrooms_count,
            city,
            date_of_listing,
            description,
            latitude,
            longitude,
            title,
            id
        ]
    );
    return result;
}

// Eliminar una propiedad por su ID
async function borrarPropiedad(id) {
    const [result] = await connection.query('DELETE FROM propiedades WHERE id = ?', [id]);
    return result;
}

// En propiedadesModel.js
async function actualizarDisponibilidad(id, disponible) {
  const [result] = await connection.query(
    'UPDATE propiedades SET disponible = ? WHERE id = ?',
    [disponible, id]
  );
  return result;
}


module.exports = {
    contarPropiedades,
    traerPropiedades,
    traerPropiedad,
    crearPropiedad,
    actualizarPropiedad,
    borrarPropiedad,
    actualizarDisponibilidad
};
